#ifndef _NUMBER_CLASSIFICATION_H_
#define _NUMBER_CLASSIFICATION_H_

// Number of segments per image
#define NUM_SEGMENTS 7

// ID number for each segment
#define TOP 0x0
#define MIDDLE 0x1
#define BOTTOM 0x2
#define TOP_LEFT 0x3
#define TOP_RIGHT 0x4
#define BOTTOM_LEFT 0x5
#define BOTTOM_RIGHT 0x6

// Bitfield representation of each segment
#define TOP_BIT (1 << TOP)
#define MIDDLE_BIT (1 << MIDDLE)
#define BOTTOM_BIT (1 << BOTTOM)
#define TOP_LEFT_BIT (1 << TOP_LEFT)
#define TOP_RIGHT_BIT (1 << TOP_RIGHT)
#define BOTTOM_LEFT_BIT (1 << BOTTOM_LEFT)
#define BOTTOM_RIGHT_BIT (1 << BOTTOM_RIGHT)

// Segments that make up each number
#define ZERO_SEGMENTS ( TOP_BIT | BOTTOM_BIT | TOP_LEFT_BIT | TOP_RIGHT_BIT | BOTTOM_LEFT_BIT | BOTTOM_RIGHT_BIT )
#define ONE_SEGMENTS_LEFT ( TOP_LEFT_BIT | BOTTOM_LEFT_BIT )
#define ONE_SEGMENTS_RIGHT ( TOP_RIGHT_BIT | BOTTOM_RIGHT_BIT )
#define TWO_SEGMENTS ( TOP_BIT | TOP_RIGHT_BIT | MIDDLE_BIT | BOTTOM_LEFT_BIT | BOTTOM_BIT )
#define THREE_SEGMENTS ( TOP_BIT | MIDDLE_BIT | BOTTOM_BIT | TOP_RIGHT_BIT | BOTTOM_RIGHT_BIT )
#define FOUR_SEGMENTS ( TOP_LEFT_BIT | TOP_RIGHT_BIT | MIDDLE_BIT | BOTTOM_RIGHT_BIT )
#define FIVE_SEGMENTS ( TOP_BIT | TOP_LEFT_BIT | MIDDLE_BIT | BOTTOM_RIGHT_BIT | BOTTOM_BIT )
#define SIX_SEGMENTS_PARTIAL ( TOP_LEFT_BIT | MIDDLE_BIT | BOTTOM_LEFT_BIT | BOTTOM_RIGHT_BIT | BOTTOM_BIT )
#define SIX_SEGMENTS ( TOP_BIT | SIX_SEGMENTS_PARTIAL )
#define SEVEN_SEGMENTS ( TOP_BIT | TOP_RIGHT_BIT | BOTTOM_RIGHT_BIT )
#define EIGHT_SEGMENTS ( TOP_BIT | MIDDLE_BIT | BOTTOM_BIT | TOP_LEFT_BIT | TOP_RIGHT_BIT | BOTTOM_LEFT_BIT | BOTTOM_RIGHT_BIT )
#define NINE_SEGMENTS_PARTIAL ( TOP_BIT | TOP_LEFT_BIT | TOP_RIGHT_BIT | MIDDLE_BIT | BOTTOM_RIGHT_BIT )
#define NINE_SEGMENTS ( NINE_SEGMENTS_PARTIAL | BOTTOM_BIT )

#endif // _NUMBER_CLASSIFICATION_H_
